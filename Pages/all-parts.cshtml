@page
@model Cart_Inventory.Pages.all_cartsModel
@{
    ViewData["Title"] = "All cartridges/modules";
}

<div class="add-item-block" style="text-align: center;">
    <form asp-page-handler="Add_new_model" method="post" id="main_form">
        <input name="name" id="create-name" type="text" placeholder="Model name" />
        <input name="barcode" id="create-barcode" type="text" placeholder="Barcode" />
        <input type="number" id="create-yellowzone" min="0" oninput="validity.valid||(value='');" name="yellow_zone" placeholder="Yellow zone">
        <button type="button" id="btn-save" class="btn btn-save">Add new model</button>
    </form>
    <a>Name: Name of module</a> <br />
    <a>Barcode: You can add several barcodes, saparated by ','</a> <br />
    <a>Yellow zone: The value below which the cartridge will be marked yellow</a>
</div>

<table class="table" id="parts_table">
    <thead>
        <tr>
            <th onclick="sortTable(0, 'click')" style="cursor: pointer;">Id<span id="arrow_0"></span></th>
            <th onclick="sortTable(1, 'click')" style="cursor: pointer;">Model<span id="arrow_1"></span></th>
            <th>Barcode</th>
            <th>Yellow zone</th>
            <th></th>
        </tr>
    </thead>
    <tbody>
        @if (Model.main_table != null)
        {
            @foreach (var item in Model.main_table)
            {
                <tr id="row_@item.id">
                    <td><a>@item.id</a></td>
                    <td>
                        <a id="model_old_@item.id">@item.model</a>
                        <input hidden name="model" id="model_new_@item.id" value="@item.model">
                    </td>
                    <td>
                        <a id="barcode_old_@item.id">@item.barcode</a>
                        <input hidden name="barcode" id="barcode_new_@item.id" value="@item.barcode">
                    </td>
                    <td>
                        <a id="yellow_zone_old_@item.id">@item.yellow_zone</a>
                        <input hidden type="number" min="0" oninput="validity.valid||(value='');" name="yellow_zone" id="yellow_zone_new_@item.id" value="@item.yellow_zone">
                    </td>
                    <td>
                        <div style="display: flex">
                            <button type="button" class="btn btn-edit" data-id="@item.id" style="margin-right: 10px;">Edit</button>
                            <button hidden type="button" class="btn btn-default" data-id="@item.id" style="margin-right: 10px;">Cancel</button>
                            @Html.AntiForgeryToken()
                            <button hidden type="button" class="btn btn-save btn-save-edit" data-id="@item.id" style="margin-right: 10px;">Save</button>
                            <form asp-page-handler="Delete_module" method="post" style="margin: 0;">
                                <input hidden name="id" value="@item.id">
                                <button type="submit" data-id="@item.id" class="btn btn-delete">Delete</button>
                            </form>
                        </div>
                    </td>
                </tr>
            }
        }
    </tbody>
</table>
<div id="notification" class="notification">
    <span id="notification-message"></span>
</div>

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            document.querySelectorAll('.btn-edit').forEach(button => {
                button.addEventListener('click', function () {
                    let rowId = this.getAttribute('data-id');
                    let row = document.getElementById('row_' + rowId);

                    row.querySelector('#model_old_' + rowId).hidden = true;
                    row.querySelector('#barcode_old_' + rowId).hidden = true;
                    row.querySelector('#yellow_zone_old_' + rowId).hidden = true;

                    row.querySelector('#model_new_' + rowId).hidden = false;
                    row.querySelector('#barcode_new_' + rowId).hidden = false;
                    row.querySelector('#yellow_zone_new_' + rowId).hidden = false;

                    this.hidden = true;
                    row.querySelector('.btn-save-edit[data-id="' + rowId + '"]').hidden = false;
                    row.querySelector('.btn-default[data-id="' + rowId + '"]').hidden = false;
                    row.querySelector('.btn-delete[data-id="' + rowId + '"]').hidden = true;
                });
            });

            document.querySelectorAll('.btn-save-edit').forEach(button => {
                button.addEventListener('click', async function () {
                    let rowId = this.getAttribute('data-id');
                    let row = document.getElementById('row_' + rowId);

                    let model = row.querySelector('#model_new_' + rowId).value;
                    let barcode = row.querySelector('#barcode_new_' + rowId).value;
                    let yellowZone = row.querySelector('#yellow_zone_new_' + rowId).value;

                    if (model === "" || barcode === "" || yellowZone === "") {
                        showNotification('Error. Check fields', 2);
                        return;
                    }

                    let response = await fetch('/all-parts?handler=Edit_module', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                        },
                        body: JSON.stringify({
                            id: rowId,
                            name: model,
                            barcode: barcode,
                            yellow_zone: yellowZone
                        })
                    });

                    if (response.ok) {
                        let newModel = await response.json();
                        if (newModel.success === false) {
                            showNotification('Error while editing. ' + newModel.message, 2);
                            return;
                        }
                        else showNotification('Editing completed successfully', 1);

                        row.querySelector('#model_old_' + rowId).hidden = false;
                        row.querySelector('#barcode_old_' + rowId).hidden = false;
                        row.querySelector('#yellow_zone_old_' + rowId).hidden = false;

                        row.querySelector('#model_old_' + rowId).textContent = model;
                        row.querySelector('#barcode_old_' + rowId).textContent = barcode;
                        row.querySelector('#yellow_zone_old_' + rowId).textContent = yellowZone;

                        row.querySelector('#model_new_' + rowId).hidden = true;
                        row.querySelector('#barcode_new_' + rowId).hidden = true;
                        row.querySelector('#yellow_zone_new_' + rowId).hidden = true;

                        this.hidden = true;
                        row.querySelector('.btn-edit[data-id="' + rowId + '"]').hidden = false;
                        row.querySelector('.btn-default[data-id="' + rowId + '"]').hidden = true;
                        row.querySelector('.btn-delete[data-id="' + rowId + '"]').hidden = false;
                    } else {
                        showNotification('Error while saving changes.', 2);
                    }
                });
            });

            document.querySelectorAll('.btn-default').forEach(button => {
                button.addEventListener('click', async function () {
                    let rowId = this.getAttribute('data-id');
                    let row = document.getElementById('row_' + rowId);

                    row.querySelector('#model_old_' + rowId).hidden = false;
                    row.querySelector('#barcode_old_' + rowId).hidden = false;
                    row.querySelector('#yellow_zone_old_' + rowId).hidden = false;

                    row.querySelector('#model_new_' + rowId).hidden = true;
                    row.querySelector('#barcode_new_' + rowId).hidden = true;
                    row.querySelector('#yellow_zone_new_' + rowId).hidden = true;

                    this.hidden = true;
                    row.querySelector('.btn-edit[data-id="' + rowId + '"]').hidden = false;
                    row.querySelector('.btn-save-edit[data-id="' + rowId + '"]').hidden = true;
                    row.querySelector('.btn-delete[data-id="' + rowId + '"]').hidden = false;
                });
            });
        });

        document.getElementById("btn-save").addEventListener("click", async function (event) {
            event.preventDefault(); // Prevent form submission

            let model = document.getElementById('create-name').value;
            let barcode = document.getElementById('create-barcode').value;
            let yellowZone = document.getElementById('create-yellowzone').value;

            if (model === "" || barcode === "") {
                showNotification('Error. Check fields', 2);
                return;
            }

            if (yellowZone === "") yellowZone = "2";

            let response = await fetch('/all-parts?handler=Add_new_model', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                },
                body: JSON.stringify({
                    name: model,
                    barcode: barcode,
                    yellow_zone: yellowZone
                })
            });

            if (response.ok) {
                let newModel = await response.json(); // Получаем данные новой модели в формате JSON

                if (newModel.success === false) {
                    showNotification('Error while adding. ' + newModel.message, 2);
                    return;
                }

                // Отображаем уведомление об успешном добавлении
                showNotification('Add success', 1);

                // Очищаем поля формы
                document.getElementById('create-name').value = '';
                document.getElementById('create-barcode').value = '';
                document.getElementById('create-yellowzone').value = '';

                // Добавляем новую строку в таблицу
                addRowToTable(newModel);
            } else {
                showNotification('Error while adding.', 2);
            }
        });

        function addRowToTable(json) {
            const tableBody = document.querySelector("table tbody");
            console.log(json.newModel.id);

            // Создаем новую строку
            let newRow = document.createElement('tr');
            newRow.setAttribute('id', 'row_' + json.newModel.id); // Присваиваем уникальный ID строке

            // Вставляем ячейки со значениями
            newRow.innerHTML = `
                <td>${json.newModel.id}</td>
                <td>
                <a id="model_old_${json.newModel.id}">${json.newModel.model}</a>
                <input hidden name="model" id="model_new_${json.newModel.id}" value="${json.newModel.model}">
                </td>
                <td>
                <a id="barcode_old_${json.newModel.id}">${json.newModel.barcode}</a>
                <input hidden name="barcode" id="barcode_new_${json.newModel.id}" value="${json.newModel.barcode}">
                </td>
                <td>
                <a id="yellow_zone_old_${json.newModel.id}">${json.newModel.yellow_zone}</a>
                <input hidden type="number" min="0" oninput="validity.valid||(value='');" name="yellow_zone" id="yellow_zone_new_${json.newModel.id}" value="${json.newModel.yellow_zone}">
                </td>
                <td>
                <div style="display: flex"style="display: flex">
                <button type="button" class="btn btn-edit" data-id="${json.newModel.id}" style="margin-right: 10px;">Edit</button>
                <button hidden type="button" class="btn btn-default" data-id="${json.newModel.id}" style="margin-right: 10px;">Cancel</button>
                <button hidden type="button" class="btn btn-save btn-save-edit" data-id="${json.newModel.id}" style="margin-right: 10px;">Save</button>
                <form asp-page-handler="Delete_module" method="post" style="margin: 0;">
                <input hidden name="id" value="${json.newModel.id}">
                <button type="submit" data-id="${json.newModel.id}" class="btn btn-delete">Delete</button>
                </form>
                </div>
                </td>
            `;

            // Добавляем новую строку в конец таблицы
            tableBody.appendChild(newRow);

            // Присоединяем обработчики событий для кнопок "Edit", "Save" и "Delete" (если есть)
            attachEventListenersToRow(newRow);
        }

        function attachEventListenersToRow(row) {
            const editButton = row.querySelector('.btn-edit');
            const saveButton = row.querySelector('.btn-save-edit');
            const cancelButton = row.querySelector('.btn-default');

            // Добавляем события для редактирования, сохранения и отмены
            if (editButton) {
                editButton.addEventListener('click', function () {
                    let rowId = this.getAttribute('data-id');
                    let row = document.getElementById('row_' + rowId);

                    row.querySelector('#model_old_' + rowId).hidden = true;
                    row.querySelector('#barcode_old_' + rowId).hidden = true;
                    row.querySelector('#yellow_zone_old_' + rowId).hidden = true;

                    row.querySelector('#model_new_' + rowId).hidden = false;
                    row.querySelector('#barcode_new_' + rowId).hidden = false;
                    row.querySelector('#yellow_zone_new_' + rowId).hidden = false;

                    this.hidden = true;
                    row.querySelector('.btn-save-edit[data-id="' + rowId + '"]').hidden = false;
                    row.querySelector('.btn-default[data-id="' + rowId + '"]').hidden = false;
                    row.querySelector('.btn-delete[data-id="' + rowId + '"]').hidden = true;
                });
            }

            // Добавляем другие обработчики (save, cancel и т.д.)
            // Аналогично тому, как это сделано в других частях скрипта
        }

        function showNotification(message, type) {
            var notification = document.getElementById("notification");
            var messageSpan = document.getElementById("notification-message");

            messageSpan.innerText = message;

            notification.classList.remove("notification-success", "notification-error");

            if (type === 1) {
                notification.classList.add("notification-success");
            } else if (type === 2) {
                notification.classList.add("notification-error");
            }

            notification.classList.add("show");

            // Hide in 3s
            setTimeout(function () {
                notification.classList.remove("show");
            }, 3000);
        }

        // SORTING
        document.addEventListener("DOMContentLoaded", function () {
            // Проверяем, есть ли данные о сортировке в localStorage
            let sortedColumn = localStorage.getItem('sortedColumn_parts_table');
            let sortDirection = localStorage.getItem('sortDirection_parts_table');

            // Если есть данные о сортировке, вызываем сортировку
            if (sortedColumn !== null && sortDirection !== null) {
                sortTable(parseInt(sortedColumn), 'saved', sortDirection);
            }
            else {
                sortedColumn = '0';
                sortDirection = 'asc';
                sortTable(parseInt(sortedColumn), 'saved', sortDirection);
            }
        });

        function sortTable(n, type, savedDir) {
            var table, rows, switching, i, x, y, shouldSwitch, dir, switchCount = 0;
            table = document.querySelector("#parts_table");
            switching = true;
            dir = savedDir ? savedDir : "asc"; // asc sort by default, or use saved direction

            // Drop arrows
            resetArrows();

            while (switching) {
                switching = false;
                rows = table.rows;

                for (i = 1; i < (rows.length - 1); i++) {
                    shouldSwitch = false;
                    x = rows[i].getElementsByTagName("TD")[n].getElementsByTagName("a")[0].innerHTML.trim();
                    y = rows[i + 1].getElementsByTagName("TD")[n].getElementsByTagName("a")[0].innerHTML.trim();

                    // Check field is number
                    var xIsNumber = !isNaN(parseFloat(x)) && isFinite(x);
                    var yIsNumber = !isNaN(parseFloat(y)) && isFinite(y);

                    if (xIsNumber && yIsNumber) {
                        // if numbers
                        x = parseFloat(x);
                        y = parseFloat(y);
                    } else {
                        // if not numbers
                        x = x.toLowerCase();
                        y = y.toLowerCase();
                    }

                    if (dir === "asc") {
                        if (x > y) {
                            shouldSwitch = true;
                            break;
                        }
                    } else if (dir === "desc") {
                        if (x < y) {
                            shouldSwitch = true;
                            break;
                        }
                    }
                }

                if (shouldSwitch) {
                    rows[i].parentNode.insertBefore(rows[i + 1], rows[i]);
                    switching = true;
                    switchCount++;
                } else {
                    if (switchCount === 0 && dir === "asc" && type === 'click') {
                        dir = "desc";
                        switching = true;
                    }
                }
            }

            // Adding arrow
            var arrowSpan = document.getElementById("arrow_" + n);
            if (dir === "asc") {
                arrowSpan.innerHTML = " &#9660;";  // Arrow down (▼)
            } else {
                arrowSpan.innerHTML = " &#9650;";  // Arrow up(▲)
            }

            // Сохраняем сортировку в localStorage
            localStorage.setItem('sortedColumn_parts_table', n);
            localStorage.setItem('sortDirection_parts_table', dir);
        }

        function resetArrows() {
            var arrows = document.querySelectorAll("span[id^='arrow']");
            arrows.forEach(function (arrow) {
                arrow.innerHTML = "";  // Drop arrows
            });
        }
        //-------------
    </script>
}