@page
@model Cart_Inventory.Pages.new_inventModel
@{
    ViewData["Title"] = "New inventarisation";
}

<div style="border-style:solid; border-width:1px; border-radius: 10px; padding: 10px; margin-bottom: 30px; text-align:center;">
    <form asp-page-handler="SubmitInventorization" method="post" id="main_form">
        <div style="text-align: center; align-items: center; justify-content: space-around;">
            <table width="100%">
                <tbody>
                    <tr style="display: flex; justify-content: space-evenly; align-items: flex-start;">
                        <td>
                            <legend>New Inventorization</legend>
                            <div class="form-group row">
                                <a>Date: @DateTime.Now.ToString("dd.MM.yyyy")</a>
                            </div>

                            <div class="form-group row">
                                Select type of inventarisation:
                                <select for="categories" name="CategoryId" id="CategoryId" items="">
                                    <option>Cartridges</option>
                                    <option>Modules</option>
                                </select>
                            </div>
                        </td>
                        <td>
                            Select manually:
                            <select id="cartridges" name="cartridges">
                                @foreach (var cartridge in Model.all_cartridges)
                                {
                                    <option value="@cartridge">@cartridge</option>
                                }
                            </select>
                            <button type="button" class="btn btn-default" id="add_cartridge_btn">
                                Add
                            </button>
                            <br />
                            Or enter barcode:
                            <input type="text" id="textInput" placeholder="Barcode" oninput="onTextInputChanged()" />
                            <br />
                            <table id="Carts_Table" class="table">
                                <thead>
                                    <tr>
                                        <th>Name</th>
                                        <th>Count</th>
                                        <th></th>
                                    </tr>
                                </thead>
                                <tbody id="Carts_Table_Body">
                                </tbody>
                            </table>
                            <input hidden name="raw_table" type="text" id="raw_table" />
                        </td>
                    </tr>
                </tbody>
            </table>
        </div>
        <button class="btn btn-save" id="btn-create">Save</button>
    </form>
</div>
@Html.AntiForgeryToken()
<div id="notification" class="notification">
    <span id="notification-message"></span>
</div>

<script>
    // ADD INVENT
    document.getElementById("btn-create").addEventListener("click", async function (event) {
        event.preventDefault(); // Prevent form submission

        let CategoryId = document.getElementById('CategoryId').value;
        let raw_table = document.getElementById('raw_table').value;

        if (raw_table === "") {
            showNotification('Error. No modules were inventoried.', 2);
            return;
        }

        let response = await fetch('/new-invent?handler=SubmitInventorization', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
            },
            body: JSON.stringify({
                CategoryId: CategoryId,
                raw_table: raw_table
            })
        });

        if (response.ok) {
            let JSONresponse = await response.json(); // Получаем данные новой модели в формате JSON
            if (JSONresponse.success === false) {
                showNotification('Error while adding.' + JSONresponse.message, 2);
                return;
            }

            // Отображаем уведомление об успешном добавлении
            showNotification('Added successfully', 1);

            // Очищаем поля формы
            document.getElementById('Carts_Table_Body').innerHTML = '';
            document.getElementById('raw_table').value = '';

        } else {
            showNotification('Error while adding.', 2);
        }
    });

    async function onTextInputChanged() {
        var inputText = document.getElementById("textInput").value;

        // Выполнение AJAX-запроса к серверу
        const response = await fetch('/new-invent?handler=OnTextInputChanged', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
            },
            body: JSON.stringify({ text: inputText })
        });

        if (response.ok) {
            const data = await response.json();

            if (data === "") {
                return; // Выход из функции, если ответ пустой
            }

            var tableBody = document.getElementById("Carts_Table_Body");

            // Заполнение таблицы новыми данными
            data.forEach(item => {
                updateTable(item.name);
            });
        } else {
            console.error("Failed to fetch data:", response.statusText);
        }
    }

    function updateRawTable() {
        let tableBody = document.getElementById("Carts_Table_Body");
        let rawData = [];

        for (let i = 0, row; row = tableBody.rows[i]; i++) {
            let cartridgeID = row.cells[0].innerText.split(" - ")[0];
            let cell1 = cartridgeID;
            let cell2 = row.cells[1].innerText;
            rawData.push(cell1 + "/" + cell2);
        }

        let rawTableInput = document.getElementById("raw_table");
        rawTableInput.value = rawData.join(",");
    }

    function updateTable(searchText) {
        // Получаем таблицу по ID
        var table = document.getElementById("Carts_Table_Body");
        let found = false;

        var inputText = document.getElementById("textInput");

        // Проходим по всем строкам таблицы, начиная со второй (первая - заголовок)
        for (let i = 0, row; row = table.rows[i]; i++) {
            // Получаем значение первой ячейки текущей строки
            let cellText = row.cells[0].innerText;

            // Проверяем, совпадает ли текст
            if (cellText === searchText) {
                // Увеличиваем значение во второй ячейке на 1
                let countCell = row.cells[1];
                countCell.innerText = parseInt(countCell.innerText) + 1;
                found = true;
                inputText.value = "";
                updateRawTable();
                break;
            }
        }

        // Если совпадение не найдено, добавляем новую строку
        if (!found) {
            let newRow = table.insertRow();
            let cell1 = newRow.insertCell(0);
            let cell2 = newRow.insertCell(1);
            let cell3 = newRow.insertCell(2);

            cell1.innerHTML = searchText;
            cell2.innerHTML = "1";
            cell3.innerHTML = `
                                            <button type="button" class="btn btn-delete" onclick="decrementCount(this)">-</button>
                                            <button type="button" class="btn btn-save" onclick="incrementCount(this)">+</button>
                                    `;
            inputText.value = "";
            updateRawTable();
        }
    }

    document.getElementById("add_cartridge_btn").addEventListener("click", async function (event) {
        event.preventDefault(); // Предотвращаем отправку формы

        var select = document.getElementById("cartridges");
        var selectedOption = select.options[select.selectedIndex];

        updateTable(selectedOption.text);
    });
    
    function decrementCount(button) {
        let row = button.closest('tr');
        let countCell = row.cells[1];
        let count = parseInt(countCell.innerText);

        if (count > 1) {
            countCell.innerText = count - 1;
        } else {
            row.remove();
        }
        updateRawTable();
    }

    function incrementCount(button) {
        var row = button.closest("tr");
        var countCell = row.cells[1];
        var count = parseInt(countCell.innerText);

        countCell.innerText = count + 1;
        updateRawTable();
    }

    // Notification
    function showNotification(message, type) {
        var notification = document.getElementById("notification");
        var messageSpan = document.getElementById("notification-message");

        messageSpan.innerText = message;

        notification.classList.remove("notification-success", "notification-error");

        if (type === 1) {
            notification.classList.add("notification-success");
        } else if (type === 2) {
            notification.classList.add("notification-error");
        }

        notification.classList.add("show");

        // Hide in 3s
        setTimeout(function () {
            notification.classList.remove("show");
        }, 3000);
    }
</script>