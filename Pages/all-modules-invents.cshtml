@page
@model Cart_Inventory.Pages.all_modules_inventsModel
@{
    ViewData["Title"] = "All cartridge inventarisations";
}

<div style="text-align:left">
    <form action="/edit-invent">
        <button class="btn btn-default" type="submit">Edit inventarisations</button>
    </form>
</div>

@Html.Raw(ViewData["DataTable"])

<script>
    // SORTING
    document.addEventListener("DOMContentLoaded", function () {
        // Проверяем, есть ли данные о сортировке в localStorage
        let sortedColumn = localStorage.getItem('sortedColumn_all_modules_table');
        let sortDirection = localStorage.getItem('sortDirection_all_modules_table');

        // Если есть данные о сортировке, вызываем сортировку
        if (sortedColumn !== null && sortDirection !== null) {
            sortTable(parseInt(sortedColumn), 'saved', sortDirection);
        }
        else {
            sortedColumn = '0';
            sortDirection = 'asc';
            sortTable(parseInt(sortedColumn), 'saved', sortDirection);
        }
    });

    function sortTable(n, type, savedDir) {
        var table, rows, switching, i, x, y, shouldSwitch, dir, switchCount = 0;
        table = document.querySelector("table");
        switching = true;
        dir = savedDir ? savedDir : "asc";

        // Drop arrows
        resetArrows();

        while (switching) {
            switching = false;
            rows = table.rows;

            for (i = 1; i < (rows.length - 1); i++) {
                shouldSwitch = false;
                x = rows[i].getElementsByTagName("TD")[n].getElementsByTagName("a")[0].innerHTML.trim();
                y = rows[i + 1].getElementsByTagName("TD")[n].getElementsByTagName("a")[0].innerHTML.trim();

                // Если сортируем второй столбец, берем только часть до запятой
                if (n === 1) {
                    x = x.includes(",") ? x.split(",")[0].trim() : x;
                    y = y.includes(",") ? y.split(",")[0].trim() : y;
                }

                // Check field is number
                var xIsNumber = !isNaN(parseFloat(x)) && isFinite(x);
                var yIsNumber = !isNaN(parseFloat(y)) && isFinite(y);

                if (xIsNumber && yIsNumber) {
                    // if numbers
                    x = parseFloat(x);
                    y = parseFloat(y);
                } else {
                    // if not numbers
                    x = x.toLowerCase();
                    y = y.toLowerCase();
                }

                if (dir === "asc") {
                    if (x > y) {
                        shouldSwitch = true;
                        break;
                    }
                } else if (dir === "desc") {
                    if (x < y) {
                        shouldSwitch = true;
                        break;
                    }
                }
            }

            if (shouldSwitch) {
                rows[i].parentNode.insertBefore(rows[i + 1], rows[i]);
                switching = true;
                switchCount++;
            } else {
                if (switchCount === 0 && dir === "asc" && type === 'click') {
                    dir = "desc";
                    switching = true;
                }
            }
        }

        // Adding arrow
        var arrowSpan = document.getElementById("arrow_" + n);
        if (dir === "asc") {
            arrowSpan.innerHTML = " &#9660;";  // Arrow down (▼)
        } else {
            arrowSpan.innerHTML = " &#9650;";  // Arrow up(▲)
        }

        // Сохраняем сортировку в localStorage
        localStorage.setItem('sortedColumn_all_modules_table', n);
        localStorage.setItem('sortDirection_all_modules_table', dir);
    }

    // Drop arrows
    function resetArrows() {
        var arrows = document.querySelectorAll("span[id^='arrow']");
        arrows.forEach(function (arrow) {
            arrow.innerHTML = "";  // Drop arrows
        });
    }
</script>